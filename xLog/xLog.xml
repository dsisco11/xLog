<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xLog</name>
    </assembly>
    <members>
        <member name="T:xLog.ANSIColor">
            <summary>
            Provides a helper class for adding XTERM/ANSI color codes to log messages.
            </summary>
        </member>
        <member name="P:xLog.ANSIColor.RequiresEmulation">
            <summary>
            Returns <c>True</c> if the current environment is one which does not support ANSI Escape Codes.
            </summary>
        </member>
        <member name="F:xLog.ANSIColor.CSI">
            <summary>
            The char that begins an ANSI command.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:xLog.ANSIColor.COLOR_RESET" -->
        <member name="M:xLog.ANSIColor.asColor(xLog.XTERM_COLOR,System.String)">
            <summary>
            Briefly changes the default Foreground color, formats a message, and then resets the foregound color.
            <para>This allows having multiple colors in a single message without interrupting the initial color, Eg: for log lines.</para>
            </summary>
        </member>
        <member name="M:xLog.ANSIColor.Strip(System.String,System.Object[])">
            <summary>
            Strips all of the XTERM command sequences from a string and returns the cleaned string.
            </summary>
        </member>
        <member name="F:xLog.ANSI_CODE.RESET_STYLE">
            <summary>
            Resets all active styling commands
            <para>To reset just Bold+Italic see: <see cref="F:xLog.ANSI_CODE.NORMAL"/></para>
            </summary>
        </member>
        <member name="F:xLog.ANSI_CODE.NORMAL">
            <summary>
            Neither Bold nor Italic
            </summary>
        </member>
        <member name="T:xLog.XTERM_CODE">
            <summary>
            Used internally by the XTERM utility class.
            DO NOT REFERENCE!
            </summary>
        </member>
        <member name="T:xLog.LoggingMethod">
            <summary>
            A custom attribute we use to mark certain logging functions so we can erase them from stack traces(so they are more readable)
            </summary>
        </member>
        <member name="T:xLog.Log">
            <summary>
            A global <see cref="T:xLog.LogSource"/> instance
            </summary>
        </member>
        <member name="F:xLog.Log.JOB_TOTAL">
            <summary>
            If set to a non-null value, specifies the progress state of an ongoing task.
            <para>The progress percentage will be shown on all log messages sent through the generic <see cref="T:xLog.Log"/> class.</para>
            </summary>
        </member>
        <member name="F:xLog.Log.JOB_CURRENT">
            <summary>
            If set to a non-null value, specifies the progress state of an ongoing task.
            <para>The progress percentage will be shown on all log messages sent through the generic <see cref="T:xLog.Log"/> class.</para>
            </summary>
        </member>
        <member name="M:xLog.Log.Indent(xLog.ELogLevel)">
            <summary>
            Adds a level of indentation to the specified LogLevel line type.
            </summary>
            <param name="level">log line type to indent</param>
        </member>
        <member name="M:xLog.Log.Unindent(xLog.ELogLevel)">
            <summary>
            Removes a level of indentation from the specified LogLevel line type.
            </summary>
            <param name="level">log line type to unindent</param>
        </member>
        <member name="M:xLog.Log.Dummy(System.String,System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.Log.Dummy(System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.Log.ErrorNull(System.String)">
            <summary>
            Outputs a log entry of the level error, specifically for NULL Argument events
            </summary>
        </member>
        <member name="M:xLog.Log.ErrorNullThrow(System.String)">
            <summary>
            Indicates an event which will cause an operation to fail.
            Additionally throws an <see cref="T:System.ArgumentNullException"/> at the location of the calling code.
            This outputs a log entry at the <c>Error</c> level, Specifically for Null argument errors.
            </summary>
        </member>
        <member name="M:xLog.Log.Banner(xLog.ELogLevel,System.String,System.Object[])">
            <summary>
            Outputs a message with a solid line of '=' chars above and below it of equal width to the longest line in the message
            </summary>
        </member>
        <member name="T:xLog.LogFactory">
            <summary>
            Facilitates the creation of new loggers
            </summary>
        </member>
        <member name="M:xLog.LogFactory.GetLogger(System.Type,xLog.ILogger)">
            <summary>
            Used to initialize a new logger instance.
            <para>Ex: GetLogger( System.Reflection.MethodBase.GetCurrentMethod().DeclaringType )</para>
            </summary>
            <returns><see cref="T:xLog.ILogger"/> instance</returns>
        </member>
        <member name="M:xLog.LogFactory.GetLogger(System.String,xLog.ILogger)">
            <summary>
            Used to initialize a new logger instance.
            <para>Ex: GetLogger( "FooBar" )</para>
            </summary>
            <returns><see cref="T:xLog.ILogger"/> instance</returns>
        </member>
        <member name="M:xLog.LogFactory.GetLogger(System.Func{System.String},xLog.ILogger)">
            <summary>
            Used to initialize a new logger instance.
            <para>Ex: GetLogger(() => "FooBar" )</para>
            </summary>
            <returns><see cref="T:xLog.ILogger"/> instance</returns>
        </member>
        <member name="T:xLog.LogSource">
            <summary>
            *THIS CLASS SHOULD NOT BE USED EXTERNALLY, USE <see cref="T:xLog.LogFactory"/> TO CREATE NEW LOG SOURCES
            Allows named log output for classes and members.
            <para>
            [LEVEL][ModuleName] log message here
            </para>
            </summary>
        </member>
        <member name="F:xLog.LogSource.Parent">
            <summary>
            The parent of this source, the parent source's name will appear before this one's in log messages.
            </summary>
        </member>
        <member name="P:xLog.LogSource.Name">
            <summary>
            Name of the module which is outputting the messages.
            </summary>
        </member>
        <member name="M:xLog.LogSource.#ctor(System.Type,xLog.ILogger)">
            <summary>
            </summary>
            <param name="Tag"></param>
            <param name="Parent">The parent log-source of this log-source</param>
        </member>
        <member name="M:xLog.LogSource.#ctor(System.String,xLog.ILogger)">
            <summary>
            </summary>
            <param name="Tag"></param>
            <param name="Parent">The parent log-source of this log-source</param>
        </member>
        <member name="M:xLog.LogSource.#ctor(System.Func{System.String},xLog.ILogger)">
            <summary>
            </summary>
            <param name="sourceNameFunc"></param>
        </member>
        <member name="M:xLog.LogSource.Indent(xLog.ELogLevel)">
            <summary>
            Adds a level of indentation to the specified LogLevel line type.
            </summary>
            <param name="level">log line type to indent</param>
        </member>
        <member name="M:xLog.LogSource.Unindent(xLog.ELogLevel)">
            <summary>
            Removes a level of indentation from the specified LogLevel line type.
            </summary>
            <param name="level">log line type to unindent</param>
        </member>
        <member name="M:xLog.LogSource.Info(System.String,System.Object[])">
            <summary>
            Use to display generic log messages
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Info(System.Object[])">
            <summary>
            Use to display generic log messages
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Console(System.String,System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.LogSource.Console(System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.LogSource.Debug(System.String,System.Object[])">
            <summary>
            Indicates information which is only useful for debugging
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Debug(System.Object[])">
            <summary>
            Indicates information which is only useful for debugging
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Success(System.String,System.Object[])">
            <summary>
            Indicates an operation's success
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Success(System.Object[])">
            <summary>
            Indicates an operation's success
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Failure(System.String,System.Object[])">
            <summary>
            Indicates an Acceptable/Expected operation failure
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Failure(System.Object[])">
            <summary>
            Indicates an Acceptable/Expected operation failure
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Warn(System.String,System.Object[])">
            <summary>
            Indicates an event which will NOT cause an operation to fail but which the user should be aware of
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Warn(System.Object[])">
            <summary>
            Indicates an event which will NOT cause an operation to fail but which the user should be aware of
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LogSource.Error(System.String,System.Object[])">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
        </member>
        <member name="M:xLog.LogSource.Error(System.Object[])">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
        </member>
        <member name="M:xLog.LogSource.Error(System.Exception)">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
        </member>
        <member name="M:xLog.LogSource.ErrorNull(System.String)">
            <summary>
            Indicates an event which will cause an operation to fail
            Outputs a log entry of the level error, specifically for NULL Argument events
            </summary>
        </member>
        <member name="M:xLog.LogSource.ErrorNullThrow(System.String)">
            <summary>
            Indicates an event which will cause an operation to fail.
            Additionally throws an <see cref="T:System.ArgumentNullException"/> at the location of the calling code.
            Outputs a log entry of the level error, specifically for NULL Argument events
            </summary>
        </member>
        <member name="M:xLog.LogSource.Banner(xLog.ELogLevel,System.String,System.Object[])">
            <summary>
            Outputs a message with a solid line of '=' chars above and below it of equal width to the longest line in the message
            </summary>
        </member>
        <member name="T:xLog.xLogEngine">
            <summary>
            Manages the actual output part of the logging process
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.LineIndent">
            <summary>
            Tracks current line indentation for all log levels
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.LogLevel_Name">
            <summary>
            The output names for <see cref="T:xLog.ELogLevel"/>s
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.Queue">
            <summary>
            The log line queue which our <see cref="F:xLog.xLogEngine.writerTask"/> processes.
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.Queue_Update_Signal">
            <summary>
            Allows signaling the log writer thread that there are lines in queue.
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.writerCancel">
            <summary>
            Allows cancelling the log writer thread.
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.StaticLines">
            <summary>
            A list of all non-moving lines within the console
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.Static_Display_Stack">
            <summary>
            Tracks the length status of all static lines currently shown on-screen
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.StaticLine_Update_Signal">
            <summary>
            Allows signaling the log writer thread to update the frozen line's text.
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.CursorControlLine">
            <summary>
            Handles showing user input
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.Consumers">
            <summary>
            Holds a list of all active log line consumers
            </summary>
        </member>
        <member name="F:xLog.xLogEngine.FileConsumer">
            <summary>
            Private Consumer used for writing output to a log file.
            </summary>
        </member>
        <member name="E:xLog.xLogEngine.onShutdown">
            <summary>
            Fired immediately before the xLogEngine starts to shutdown and stop accepting new log lines.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Processing_Thread_Release">
            <summary>
            Called by the log writer to release it's resources
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Stop_Processing">
            <summary>
            Stops the active log writer and waits for it to exit
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Dispose">
            <summary>
            Releases all logging system resources permanently
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Finalize_Log_FileName(System.String)">
            <summary>
            Finalizes a given log filename by ensuring the specified Log_Directory and Log_File_Ext are attached to the path.
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:xLog.xLogEngine.Begin">
            <summary>
            Begins logging to a file named by the current date. When the date changes the logger will automatically switch to a new file.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Begin(System.String)">
            <summary>
            Begins logging to a file, overwriting the contents of the file if it already exists.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Resume(System.String)">
            <summary>
            Continues logging to a file if it already exists or creates it.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Start">
            <summary>
            Starts the logger without initializing a file, meaning output goes to the console *ONLY*.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.OutputLine(xLog.ELogLevel,System.Collections.Generic.ICollection{xLog.RawLogLine})">
            <summary>
            Outputs a line all applicable <see cref="T:xLog.ILogLineConsumer"/>s
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.OutputLine(xLog.ELogLevel,xLog.RawLogLine)">
            <summary>
            Outputs a line all applicable <see cref="T:xLog.ILogLineConsumer"/>s
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.OutputLine(xLog.ELogLevel,System.String,System.Object[])">
            <summary>
            Outputs a line all applicable <see cref="T:xLog.ILogLineConsumer"/>s
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.OutputLine(xLog.ELogLevel,System.String,System.Diagnostics.StackTrace,System.Object[])">
            <summary>
            Outputs a line all applicable <see cref="T:xLog.ILogLineConsumer"/>s
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.OutputLine(xLog.ELogLevel,System.String,System.String,System.Object[])">
            <summary>
            Outputs a line all applicable <see cref="T:xLog.ILogLineConsumer"/>s
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Append(xLog.ELogLevel,System.String,System.Object[])">
            <summary>
            Appends text to the end of the previous line
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Make_Exception_External(System.Exception)">
            <summary>
            Returns an exceptions stacktrace adjusted and offset so it originates before any of the logging method calls which lead here.
            <para>
            In laymans terms this function returns a modified <see cref="T:System.Diagnostics.StackTrace"/> object that omits any functions marked with the <see cref="T:xLog.LoggingMethod"/> attribute,
            this helps make stack traces much more useful and less cluttered.
            </para>
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:xLog.xLogEngine.Request_Cursor_Control(xLog.Widgets.StaticConsoleLine)">
            <summary>
            Allows a line to request control of the console cursor.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:xLog.xLogEngine.Clear_Static_Lines">
            <summary>
            Clears all static line text from the console.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Bump_Line(xLog.Widgets.StaticConsoleLine)">
            <summary>
            Used by the logger thread to update the display for a line
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:xLog.xLogEngine.Print_Static_Lines">
            <summary>
            Prints all static lines into the console.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Indent(xLog.ELogLevel)">
            <summary>
            Adds a level of indentation to the specified LogLevel line type.
            </summary>
            <param name="Level">log line type to indent</param>
        </member>
        <member name="M:xLog.xLogEngine.Unindent(xLog.ELogLevel)">
            <summary>
            Removes a level of indentation from the specified LogLevel line type.
            </summary>
            <param name="Level">log line type to unindent</param>
        </member>
        <member name="M:xLog.xLogEngine.Assert(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition; if the condition is <c>false</c>, outputs a specified message and displays a message box that shows the call stack.
            This method is equivalent to System.Diagnostics.Debug.Assert, however, it was modified to also write to the Logger output.
            Borrowed from <c>SteamKit2</c>
            </summary>
            <param name="Condition">The conditional expression to evaluate. If the condition is <c>true</c>, the specified message is not sent and the message box is not displayed.</param>
            <param name="Origin">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="Message">The message to display if the assertion fails.</param>
        </member>
        <member name="M:xLog.xLogEngine.Info(System.String,System.String,System.Object[])">
            <summary>
            Use to display generic log messages
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Info(System.String,System.Object[])">
            <summary>
            Use to display generic log messages
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Console(System.String,System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Console(System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.xLogEngine.Debug(System.String,System.String,System.Object[])">
            <summary>
            Indicates information which is only useful for debugging
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Debug(System.String,System.Object[])">
            <summary>
            Indicates information which is only useful for debugging
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Trace(System.String,System.String,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Trace(System.String,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Trace(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Trace(System.String,System.Int32,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Success(System.String,System.String,System.Object[])">
            <summary>
            Indicates an operation's success
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Success(System.String,System.Object[])">
            <summary>
            Indicates an operation's success
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Failure(System.String,System.String,System.Object[])">
            <summary>
            Indicates an Acceptable/Expected operation failure
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Failure(System.String,System.Object[])">
            <summary>
            Indicates an Acceptable/Expected operation failure
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Warn(System.String,System.String,System.Object[])">
            <summary>
            Indicates an event which will NOT cause an operation to fail but which the user should be aware of
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Warn(System.String,System.Object[])">
            <summary>
            Indicates an event which will NOT cause an operation to fail but which the user should be aware of
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Error(System.String,System.String,System.Object[])">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Error(System.String,System.Object[])">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Error(System.String,System.Exception)">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.ErrorNull(System.String,System.String)">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level, Specifically for Null item errors.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="paramName">The name of the object in question.</param>
        </member>
        <member name="M:xLog.xLogEngine.ErrorNullThrow(System.String,System.String)">
            <summary>
            Indicates an event which will cause an operation to fail.
            Additionally throws an <see cref="T:System.ArgumentNullException"/> at the location of the calling code.
            This outputs a log entry at the <c>Error</c> level, Specifically for Null argument errors.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="paramName">The name of the object in question.</param>
        </member>
        <member name="M:xLog.xLogEngine.Interface(System.String,System.String,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Interface</c> level.
            Normally, this means user input is required to continue...
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Interface(System.String,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Interface</c> level.
            Normally, this means user input is required to continue...
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.xLogEngine.Banner(xLog.ELogLevel,System.String,System.String,System.Object[])">
            <summary>
            Outputs a message with a solid line of '=' chars above and below it of equal width to the longest line in the message
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="F:xLog.ELogLevel.Interface">
            <summary>This log level dictates that user input is required before the code progresses</summary>
        </member>
        <member name="F:xLog.ELogLevel.MAX">
            <summary>Maximum possible <see cref="T:xLog.ELogLevel"/> value</summary>
        </member>
        <member name="F:xLog.ELogLevel.Console">
            <summary>
            Console lines aren't displayed in log file output and have no log level tag,
            They look just like normal output from the <see cref="!:Console.Write"/> or <see cref="!:Console.WriteLine"/> functions.
            </summary>
        </member>
        <member name="T:xLog.ILogger">
            <summary>
            Represents a logger instance
            </summary>
        </member>
        <member name="M:xLog.ILogger.Indent(xLog.ELogLevel)">
            <summary>
            Adds a level of indentation to the specified LogLevel line type.
            </summary>
            <param name="level">log line type to indent</param>
        </member>
        <member name="M:xLog.ILogger.Unindent(xLog.ELogLevel)">
            <summary>
            Removes a level of indentation from the specified LogLevel line type.
            </summary>
            <param name="level">log line type to unindent</param>
        </member>
        <member name="M:xLog.ILogger.Info(System.String,System.Object[])">
            <summary>
            Use to display generic log messages
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Info(System.Object[])">
            <summary>
            Use to display generic log messages
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Console(System.String,System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.ILogger.Console(System.Object[])">
            <summary>
            Use to display unlogged console messages.
            Using <see cref="M:System.Console.Write(System.Boolean)"/> or <see cref="M:System.Console.WriteLine"/> will corrupt the displayed text in the console window.
            </summary>
        </member>
        <member name="M:xLog.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Indicates information which is only useful for debugging
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Debug(System.Object[])">
            <summary>
            Indicates information which is only useful for debugging
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Success(System.String,System.Object[])">
            <summary>
            Indicates an operation's success
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Success(System.Object[])">
            <summary>
            Indicates an operation's success
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Failure(System.String,System.Object[])">
            <summary>
            Indicates an Acceptable/Expected operation failure
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Failure(System.Object[])">
            <summary>
            Indicates an Acceptable/Expected operation failure
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Indicates an event which will NOT cause an operation to fail but which the user should be aware of
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Warn(System.Object[])">
            <summary>
            Indicates an event which will NOT cause an operation to fail but which the user should be aware of
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogger.Error(System.String,System.Object[])">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
        </member>
        <member name="M:xLog.ILogger.Error(System.Object[])">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
        </member>
        <member name="M:xLog.ILogger.Error(System.Exception)">
            <summary>
            Indicates an event which will cause an operation to fail
            This outputs a log entry at the <c>Error</c> level.
            </summary>
        </member>
        <member name="M:xLog.ILogger.ErrorNull(System.String)">
            <summary>
            Indicates an event which will cause an operation to fail
            Outputs a log entry of the level error, specifically for NULL Argument events
            </summary>
        </member>
        <member name="M:xLog.ILogger.ErrorNullThrow(System.String)">
            <summary>
            Indicates an event which will cause an operation to fail.
            Additionally throws an <see cref="T:System.ArgumentNullException"/> at the location of the calling code.
            Outputs a log entry of the level error, specifically for NULL Argument events
            </summary>
        </member>
        <member name="M:xLog.ILogger.Interface(System.String,System.Object[])">
            <summary> 
            This outputs a log entry of the level interface;
            normally, this means that some sort of user interaction
            is required.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:xLog.ILogger.Interface(System.Object[])">
            <summary> 
            This outputs a log entry of the level interface;
            normally, this means that some sort of user interaction
            is required.
            </summary>
        </member>
        <member name="M:xLog.ILogger.Banner(xLog.ELogLevel,System.String,System.Object[])">
            <summary>
            Outputs a message with a solid line of '=' chars above and below it of equal width to the longest line in the message
            </summary>
        </member>
        <member name="T:xLog.ILogLineConsumer">
            <summary>
            Defines an object that consumes log lines.
            <para>Uses might include an object which writes log lines to file, or an object which streams log lines over a network connection.</para>
            </summary>
        </member>
        <member name="T:xLog.ILogLineFormatter">
            <summary>
            Defines all of the functionality a log line formatter should implement
            </summary>
        </member>
        <member name="M:xLog.ILogLineFormatter.Assert(System.String@,System.String@)">
            <summary>
            Checks for a condition; if the condition is <c>false</c>, outputs a specified message and displays a message box that shows the call stack.
            This method is equivalent to System.Diagnostics.Debug.Assert, however, it was modified to also write to the Logger output.
            Borrowed from <c>SteamKit2</c>
            </summary>
            <param name="Condition">The conditional expression to evaluate. If the condition is <c>true</c>, the specified message is not sent and the message box is not displayed.</param>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="Message">The message to display if the assertion fails.</param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Info(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Info(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Dummy(System.String@,System.Object[])">
            <summary>
            <see cref="!:xLogEngine.Dummy(string, string, object[])"/>
            </summary>
        </member>
        <member name="M:xLog.ILogLineFormatter.Dummy(System.Object[])">
            <summary>
            <see cref="M:xLog.xLogEngine.Console(System.String,System.Object[])"/>
            </summary>
        </member>
        <member name="M:xLog.ILogLineFormatter.Debug(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Debug(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Trace(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Trace(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Trace(System.String@,System.Int32@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Trace(System.String@,System.Int32@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Success(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Success(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Failure(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Failure(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Warn(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Warn(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Error(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Error(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Error(System.String@,System.Exception,System.String@)">
            <summary>
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.ErrorNull(System.String@,System.String,System.String@)">
            <summary>
            This outputs a log entry at the <c>Error</c> level, Specifically for Null item errors.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="nullObjectName">The name of the object in question.</param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Interface(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Interface</c> level.
            Normally, this means user input is required to continue...
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Interface(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Interface</c> level.
            Normally, this means user input is required to continue...
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Prompt(System.String@,System.String@)">
            <summary>
            Displays a prompt message in the console and then passes any user input to the specified callback handler, repeating the input process whenever the handler returns <c>False</c>
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="Message">Message to display to the user</param>
        </member>
        <member name="M:xLog.ILogLineFormatter.Banner(System.String,System.String,System.Object[])">
            <summary>
            Outputs a message with a solid line of '=' chars above and below it of equal width to the longest line in the message
            <para>(This outputs a log entry of the level success.)</para>
            </summary>
            <param name="Output">Final string to be output by the logger</param>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="T:xLog.LogEngineSettings">
            <summary>
            Settings for the entire logging system
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.ShowSources">
            <summary>
            Should log source names be included in the output?
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.ShowTimestamps">
            <summary>
            Should log lines be timestamped?
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.AllowColorCodes">
            <summary>
            Specifies if color codes are allowed in log output at all, if false then color codes will be stripped from ALL log lines before they are output to consumers OR the console.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.AllowConsumerColorCodes">
            <summary>
            Specified if color codes should be stripped from log lines before they are output to consumers?
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.Show_LogLevel_Names">
            <summary>
            If <c>True</c> then every log line output will show it's LogLevel at the start of the line.
            Meaning that debug lines start with "DEBUG: " and error lines start with "ERROR: " etc.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.Use_UTC_Time">
            <summary>
            If <c>True</c> then the logging system will base it's log line timecode output as well as it's file names and auto log file switching times on UTC standard time instead of local time.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.Timestamp_Format">
            <summary>
            The time format string to use for log lines.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.LogFile_Date_Format">
            <summary>
            The date format string to use for log file names.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.Log_Directory">
            <summary>
            The directory that <c>Get_Todays_LogFile()</c> will prepend to its returned path.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.Log_File_Ext">
            <summary>
            The file extension that <c>Get_Todays_LogFile()</c> will append to its returned path.
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.IndentSize">
            <summary>
            Size of line indentations in spaces
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.Formatter">
            <summary>
            Used to assign a custom <see cref="T:xLog.LineFormatter"/> to manipulate log line output
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.LogLevel_Name_Shown">
            <summary>
            Determines if lines of a particular <see cref="T:xLog.ELogLevel"/> will have the level name prepended to them.
            (Default: All True)
            </summary>
            <example>
            Usage:
            <code>
            LogLevel_Name_Show[ELogLevel.Debug] = false;
            </code>
            </example>
        </member>
        <member name="F:xLog.LogEngineSettings.OutputLevel">
            <summary>
            The MINIMUM <see cref="T:xLog.ELogLevel"/> a log line must be to appear in the CONSOLE
            </summary>
        </member>
        <member name="F:xLog.LogEngineSettings.LoggingLevel">
            <summary>
            The MINIMUM <see cref="T:xLog.ELogLevel"/> a log line must be to appear in the LOG FILE
            </summary>
        </member>
        <member name="F:xLog.RawLogLine.Source">
            <summary>
            The source of this line
            </summary>
        </member>
        <member name="F:xLog.RawLogLine.Format">
            <summary>
            The format of this line
            </summary>
        </member>
        <member name="F:xLog.RawLogLine.Args">
            <summary>
            The arguments for the format string of this line
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.Consume">
            <summary>
            Returns the string value of the area between the end of the previously consumed result and the current peek index
            </summary>
            <returns></returns>
        </member>
        <member name="M:xLog.DumbStringTokenizer.TryConsume(System.Char)">
            <summary>
            Attempts to consume a specified character and returns true if successful.
            </summary>
            <param name="ch">The character to consume</param>
            <returns>True/False if the character was present and able to be consumed</returns>
        </member>
        <member name="M:xLog.DumbStringTokenizer.ConsumeNext">
            <summary>
            Consumes and returns the char at the current consume index, the increments the consume index by 1
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.Peek">
            <summary>
            Let's us view the current char that would be dedicated to the consume list of we called Next()
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.PeekNext">
            <summary>
            Let's us peek at the next char without really dedicating to it.
            Allows us to tell if the next char fits a particular criteria before calling next() and causing it to then become part of the segment which will be returned by a call to Consume()
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.Next">
            <summary>
            Increases the peek index by 1 if possible and returns if it was possible.
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.PeekEnd">
            <summary>
            Moves the current peek index to the end of the buffer
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.ConsumeAll">
            <summary>
            Consumes the rest of the string and returns the result.
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.CanPeek">
            <summary>
            Returns wether or not the current peek index is at the end of the buffer
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.HasNext">
            <summary>
            Returns wether or not calling Next would return True
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.CanConsume">
            <summary>
            Returns wether or not the current peek index is at the end of the buffer
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.ResetPeek">
            <summary>
            Resets the peek index back to 
            </summary>
        </member>
        <member name="M:xLog.DumbStringTokenizer.Rewind(System.Int32)">
            <summary>
            Moves the peek index back by a specified amount (Defaults to 1)
            </summary>
        </member>
        <member name="T:xLog.LineFormatter">
            <summary>
            Base class for all <see cref="T:xLog.LineFormatter"/> which format the output text for all logging functions.
            <para>By inheriting this class custom formatters can be made to change the output text for log functions.</para>
            <para>To use a custom formatter an instance of it must be assigned to the <see cref="P:xLog.xLogEngine.CurrentFormatter"/> variable.</para>
            </summary>
        </member>
        <member name="M:xLog.LineFormatter.Assert(System.String@,System.String@)">
            <summary>
            Checks for a condition; if the condition is <c>false</c>, outputs a specified message and displays a message box that shows the call stack.
            This method is equivalent to System.Diagnostics.Debug.Assert, however, it was modified to also write to the Logger output.
            Borrowed from <c>SteamKit2</c>
            </summary>
            <param name="Condition">The conditional expression to evaluate. If the condition is <c>true</c>, the specified message is not sent and the message box is not displayed.</param>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="Message">The message to display if the assertion fails.</param>
        </member>
        <member name="M:xLog.LineFormatter.Info(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Info(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Info</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Dummy(System.String@,System.Object[])">
            <summary>
            <see cref="!:xLogEngine.Dummy(string, string, object[])"/>
            </summary>
        </member>
        <member name="M:xLog.LineFormatter.Dummy(System.Object[])">
            <summary>
            <see cref="M:xLog.xLogEngine.Console(System.String,System.Object[])"/>
            </summary>
        </member>
        <member name="M:xLog.LineFormatter.Debug(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Debug(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Debug</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Trace(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Trace(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Trace(System.String@,System.Int32@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Trace(System.String@,System.Int32@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Trace</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Success(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Success(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Success</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Failure(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Failure(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Failure</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Warn(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Warn(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Warning</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Error(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Error(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Error(System.String@,System.Exception,System.String@)">
            <summary>
            This outputs a log entry at the <c>Error</c> level.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.ErrorNull(System.String@,System.String,System.String@)">
            <summary>
            This outputs a log entry at the <c>Error</c> level, Specifically for Null item errors.
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="nullObjectName">The name of the object in question.</param>
        </member>
        <member name="M:xLog.LineFormatter.Interface(System.String@,System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Interface</c> level.
            Normally, this means user input is required to continue...
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Interface(System.String@,System.Object[])">
            <summary>
            This outputs a log entry at the <c>Interface</c> level.
            Normally, this means user input is required to continue...
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="M:xLog.LineFormatter.Prompt(System.String@,System.String@)">
            <summary>
            Displays a prompt message in the console and then passes any user input to the specified callback handler, repeating the input process whenever the handler returns <c>False</c>
            </summary>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
            <param name="Message">Message to display to the user</param>
        </member>
        <member name="M:xLog.LineFormatter.Banner(System.String,System.String,System.Object[])">
            <summary>
            Outputs a message with a solid line of '=' chars above and below it of equal width to the longest line in the message
            <para>(This outputs a log entry of the level success.)</para>
            </summary>
            <param name="Output">Final string to be output by the logger</param>
            <param name="Source">Name of the calling <see cref="T:xLog.LogSource"/> object or <c>Null</c></param>
        </member>
        <member name="T:xLog.Widgets.StaticConsoleLine">
            <summary>
            Manages access to static console lines provided by the logging system.
            A 'static' line is one that does not appear in log files but appears on the console output stream and whose position does not change within the console yet allows text to scroll around it.
            </summary>
        </member>
        <member name="P:xLog.Widgets.StaticConsoleLine.ID">
            <summary>
            Index within the logging system's map of static lines.
            </summary>
        </member>
        <member name="P:xLog.Widgets.StaticConsoleLine.Current_Display_Length">
            <summary>
            Tracks the length of the text this line currently has displayed on-screen.
            </summary>
        </member>
        <member name="P:xLog.Widgets.StaticConsoleLine.Buffer">
            <summary>
            The text this line wants to display on-screen (can differ from what is currently displayed)
            </summary>
        </member>
        <member name="F:xLog.Widgets.StaticConsoleLine.HasCursorControl">
            <summary>
            Whichever <see cref="T:xLog.Widgets.StaticConsoleLine"/> has control of the console cursor will always be rendered last
            </summary>
        </member>
        <member name="M:xLog.Widgets.StaticConsoleLine.Set(System.String)">
            <summary>
            Sets the text displayed by this <see cref="T:xLog.Widgets.StaticConsoleLine"/>
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:xLog.Widgets.StaticConsoleLine.Append(System.String)">
            <summary>
            Appends text to this <see cref="T:xLog.Widgets.StaticConsoleLine"/>
            </summary>
            <param name="Text"></param>
        </member>
        <member name="F:xLog.Widgets.ConsoleProgressBar.MAX_HIST">
            <summary>
            Maximum number of history samples to use when calculating ETA
            </summary>
        </member>
        <member name="M:xLog.Widgets.ConsoleProgressBar.Set_Progress(System.Double)">
            <summary>
            Sets the progress being displayed to a new value
            </summary>
            <param name="Percent">Progress percentage in the [0.0 - 1.0] range</param>
        </member>
        <member name="T:xLog.Widgets.ConsoleWidget">
            <summary>
            Basis for a generic console text based tool used for displaying some form of information.
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsoleWidget.Line">
            <summary>
            The <see cref="T:xLog.Widgets.StaticConsoleLine"/> for this widget.
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsoleWidgetType.Spinner">
            <summary>
            Anything that portrays a task being in progress.
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsoleWidgetType.Progress">
            <summary>
            Anything that displays a progress value of some sort.
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsoleWidgetType.Timer">
            <summary>
            Anything that displays a timer.
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsoleWidgetType.Input">
            <summary>
            Anything accepting user input.
            </summary>
        </member>
        <member name="T:xLog.Widgets.ConsolePressAny">
            <summary>
            Outputs a "Press ANY key to continue" message and allows waiting for the user to press a key
            </summary>
        </member>
        <member name="T:xLog.Widgets.PromptInputValidatorDelegate">
            <summary>
            Delegate describing functions which can validate user input for the logging systems prompt functions.
            </summary>
            <param name="PreInput">The complete user input string before the current key</param>
            <param name="Input">The complete user input string</param>
            <param name="Key">The key which was just pressed</param>
            <returns>Accept Input. if <c>False</c>, the input key will be disregarded.</returns>
        </member>
        <member name="T:xLog.Widgets.PromptResultValidatorDelegate">
            <summary>
            Function that validates a prompt result.
            </summary>
            <param name="UserInput">The complete user input string</param>
            <returns>Input Valid. If <c>False</c>, prompt will be repeated.</returns>
        </member>
        <member name="F:xLog.Widgets.ConsolePromptBase`1.Message">
            <summary>
            The prompt message
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsolePromptBase`1.ConcealInput">
            <summary>
            If true then characters in the user input string will be replaced with the masking character
            </summary>
        </member>
        <member name="F:xLog.Widgets.ConsolePromptBase`1.CursorPos">
            <summary>
            Console cursor position
            </summary>
        </member>
        <member name="M:xLog.Widgets.ConsolePromptBase`1.Set_Input(System.String)">
            <summary>
            Sets the complete user input string value
            </summary>
            <param name="Input"></param>
        </member>
        <member name="T:xLog.Widgets.ConsolePromptBool">
            <summary>
            Prompts the user for a boolean (yes/no) response
            </summary>
        </member>
        <member name="F:xLog.Timing.timers">
            <summary>
            Tracks callback actions so multiple timeout calls to the same function can cancel and pending one to prevent multiple triggers
            </summary>
        </member>
        <member name="M:xLog.Timing.setTimeout(System.TimeSpan,System.Action)">
            <summary>
            For async methods just use "await Task.Delay" as it uses Timer internally
            </summary>
            <param name="dt"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:xLog.Timing.setTimeout(System.Int32,System.Action)">
            <summary>
            For async methods just use "await Task.Delay" as it uses Timer internally
            </summary>
            <param name="ms"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:xLog.Timing.cancelTimeout(System.Threading.Timer)">
            <summary>
            Cancels a previously queued delay timer if it has not fired already.
            </summary>
        </member>
        <member name="M:xLog.Timing.cancelTimeout(System.Action)">
            <summary>
            Cancels a previously queued delay timer if it has not fired already.
            </summary>
        </member>
        <member name="T:xLog.ConsoleExt">
            <summary>
            Contains helpful functions for performing complex UI related operations on console output
            </summary>
        </member>
        <member name="M:xLog.ConsoleExt.Rewrite_Line(System.String)">
            <summary>
            Erases the current console line and replaces it with different text
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:xLog.ConsoleExt.Progress(System.Single)">
            <summary>
            Creates a progress bar at the current console cursor position and returns that position so the progress bar may be continually updated.
            </summary>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:xLog.ConsoleExt.Progress(System.Single,xLog.ConsoleExt.ConsoleLinePos@)">
            <summary>
            Draws a grey and green progress bar in the console
            </summary>
            <param name="percent">The normalized percentage for the progress bar in the range [0f-1f]</param>
        </member>
        <member name="M:xLog.ConsoleExt.Draw_Ellipses(System.Int32@,System.Int32,xLog.ConsoleExt.ConsoleLinePos@)">
            <summary>
            Draws a grey and green progress bar in the console
            </summary>
            <param name="percent">The normalized percentage for the progress bar in the range [0f-1f]</param>
        </member>
    </members>
</doc>
